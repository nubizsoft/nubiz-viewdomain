{
  "author": {
    "name": "adrai"
  },
  "name": "viewmodel",
  "version": "0.5.4",
  "private": false,
  "main": "index.js",
  "engines": {
    "node": ">=0.4.12"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "lodash": ">= 2.4.1",
    "tolerance": ">= 1.0.0"
  },
  "devDependencies": {
    "async": ">= 0.1.18",
    "mocha": ">= 1.0.1",
    "expect.js": ">= 0.1.2",
    "azure-storage": "git+https://github.com/nubizsoft/azure-storage-node"
  },
  "description": "Node-viewmodel is a node.js module for multiple databases. It can be very useful if you work with (d)ddd, cqrs, eventdenormalizer, host, etc.",
  "keywords": [
    "orm",
    "viewmodel",
    "repository",
    "repo",
    "model",
    "view",
    "host",
    "mongodb",
    "memory",
    "couchdb",
    "database",
    "cqrs",
    "eventsourcing",
    "ddd",
    "dddd",
    "command",
    "event",
    "eventdenormalizer",
    "domain"
  ],
  "homepage": "https://github.com/adrai/node-viewmodel",
  "repository": {
    "type": "git",
    "url": "git@github.com:adrai/node-viewmodel.git"
  },
  "bugs": {
    "url": "https://github.com/adrai/node-viewmodel/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/adrai/node-viewmodel/master/licence"
    }
  ],
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Introduction\n\n[![Build Status](https://secure.travis-ci.org/adrai/node-viewmodel.png)](http://travis-ci.org/adrai/node-viewmodel)\n\nNode-viewmodel is a node.js module for multiple databases.\nIt can be very useful if you work with (d)ddd, cqrs, eventdenormalizer, host, etc.\n\n# Installation\n\n    $ npm install viewmodel\n\n# Usage\n\n## Connecting to an in-memory repository in read mode\n\n\tvar repo = require('viewmodel').read;\n\n\trepo.init(function(err) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n    });\n\n## Connecting to any repository (mongodb in the example / mode=write)\nMake shure you have installed the required driver, in this example run: 'npm install mongodb'.\n\n    var repo = require('viewmodel').write;\n\n    repo.init(\n        {\n            type: 'mongoDb',\n            host: 'localhost',      // optional\n            port: 27017,            // optional\n            dbName: 'viewmodel',    // optional\n            collectionName: 'dummy',// optional and only if you directly want to use a collection, so repo.extend() is not necessary...\n            timeout: 10000          // optional\n        }, \n        function(err) {\n            if(err) {\n                console.log('ohhh :-(');\n                return;\n            }\n        }\n    );\n\n## Define a collection...\n\n    var dummyRepo = repo.extend({\n        collectionName: 'dummy'\n    });\n\n## Create a new viewmodel (only in write mode)\n\n    dummyRepo.get(function(err, vm) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        vm.set('myProp', 'myValue');\n        vm.color = 'green';\n\n        dummyRepo.commit(vm, function(err) {\n        });\n        // or you can call commit directly on vm...\n        vm.commit(function(err) {\n        });\n    });\n\n## Find...\n\n    // the query object ist like in mongoDb...\n    dummyRepo.find({ color: 'green' }, function(err, vms) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        // vms is an array of all what is in the repository\n        var firstItem = vms[0];\n        console.log('the id: ' + firstItem.id);\n        console.log('the saved value: ' + firstItem.color);\n    });\n\n## Find by id...\n\n    // the query object ist like in mongoDb...\n    dummyRepo.get('myId', function(err, vm) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        console.log('the id: ' + vm.id);\n        console.log('the saved value: ' + vm.color);\n    });\n\n## Delete a viewmodel (only in write mode)\n\n    dummyRepo.get('myId', function(err, vm) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        vm.destroy();\n\n        dummyRepo.commit(vm, function(err) {\n        });\n        // or you can call commit directly on vm...\n        vm.commit(function(err) {\n        });\n    });\n\n## Obtain a new id\n\n    myQueue.getNewId(function(err, newId) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        console.log('the new id is: ' + newId);\n    });\n\n## Create an own instance\n\n    var repo = require('viewmodel').read.create();\n\n    repo.init(function(err) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n    });\n\n\n# Database Support\nCurrently these databases are supported:\n\n1. inMemory\n2. mongodb ([node-mongodb-native] (https://github.com/mongodb/node-mongodb-native))\n3. couchdb ([cradle] (https://github.com/cloudhead/cradle))\n4. tingodb ([tingodb] (https://github.com/sergeyksv/tingodb))\n\n# License\n\nCopyright (c) 2014 Adriano Raiano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "viewmodel@0.5.4",
  "_shasum": "586e0bee82061b3e52b8f01b6236d7e8582b49df",
  "_resolved": "git+https://github.com/nubizsoft/node-viewmodel#d8fd84e942be0cdfe6df07e12df27c0c2c52fd30",
  "_from": "viewmodel@git+https://github.com/nubizsoft/node-viewmodel"
}
